<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Presentation</name>
    </assembly>
    <members>
        <member name="M:Presentation.IAM.UserAuthenticationController.UserLogin(Domain.IAM.Models.Queries.GetTokenQuery)">
            <summary>
                Allows the user to log into the system providing a JWT token as authentication.
            </summary>
            <param name="request">Body request parameters that represents the input credentials of the user.</param>
            <returns>
                Returns a <c>AuthenticationResults</c> object as a valid response to the user's request.
            </returns>
            <remarks>
                This endpoint allows the user to log into the system providing a JWT token and a refresh token as a valid authentication.
                <para>You have to provide the user's credentials such as password and username.</para>
                <para>Here is an overview of the parameters of <c>UserAuthenticationRequest</c>: </para>
                    <para> &#149; <b>Username</b>: The username of the user. </para>
                    <para> &#149; <b>Password</b>: The password. </para>
                <para>Both user's credentials are needed to log the user in successfully.</para>
                <br></br>
                <para>What's actually returns is a bit more complex, but still manageable.</para>
                <para>The type of the returned response (successful log in) is an instance of <c>AuthenticationResults</c>.</para>
                <para><c>AuthenticationResults</c> has the following properties: </para>
                    <para> &#149; <b>token</b>: The token used for any request. </para>
                    <para> &#149; <b>refreshToken</b>: Allows the user to refresh their token. </para>
                    <para> &#149; <b>result</b>: Successful or unsucessful. </para>
                    <para> &#149; <b>message</b>: Just a message, nothing else. </para>
            </remarks>
            <response code="200">Returns <b>a valid session</b> for the user login.</response>
            <response code="500"><b>Something wrong</b> appears to be with your query.</response>
            <response code="401">You <b>didn't provide the correct credentials</b> for a successful login.</response>
        </member>
        <member name="M:Presentation.IAM.UserAuthenticationController.ObtainRefreshToken(Domain.IAM.Models.Commands.RefreshTokenCommand)">
            <summary>
                Refreshes the user's token for more request without re-logging in.
            </summary>
            <param name="command">Body request parameters that represents the refresh token and the expired token.</param>
            <returns>
                Returns a <c>authorizationResponse</c> object as a valid response to the user's new token request.
            </returns>
            <remarks>
                This endpoint allows the user to refresh their token for more requests without re-logging in.
                <para>The parameters of the request are the following: </para>
                    <para> &#149; <b>ExpiredToken</b>: The expired token. </para>
                    <para> &#149; <b>RefreshToken</b>: The returned refresh token given when first login. </para>
                <para>The type of the returned response is an instance of <c>AuthenticationResults</c>.</para>
                <para><c>AuthenticationResults</c> has the following properties: </para>
                    <para> &#149; <b>token</b>: The token used for any request. </para>
                    <para> &#149; <b>refreshToken</b>: Allows the user to refresh their token. </para>
                    <para> &#149; <b>result</b>: Successful or unsucessful. </para>
                    <para> &#149; <b>message</b>: Just a message, nothing else. </para>
                <para>You can use <i>refreshToken</i> to request a new token using the expired <c>token</c>.</para>
            </remarks>
            <response code="200">Returns <b>another valid session</b> for the user.</response>
            <response code="500"><b>Something wrong</b> appears to be with your query.</response>
            <response code="401"><b>Token may not be expired</b>, or any <b>input was incorrect</b>.</response>
        </member>
        <member name="M:Presentation.IAM.UserController.GetUserInformation(System.Int32)">
            <summary>
                Obtain the information of a user by its ID.
            </summary>
            <returns>
                Returns the information of a user of type <c>UserInformation</c>.
            </returns>
            <remarks>
                This endpoint returs the information of a user of type <c>UserInformation</c>.
                <para>If you were expecting to return also the user credentials, well not obviously.</para>
                <para>You only need to provide an Id to start searching.</para>
                <para>Note that this controller must be set with the annotation <i>[Authorize]</i></para>
                <para>so any request to get the information of any user (at least public information)</para>
                <para>must be authorized through login. But for this purpose, this is set as public and</para>
                <para>anyone can access to this controller without authorization.</para>
            </remarks>
            <response code="200">Returns <b>the information of the user</b>.</response>
            <response code="404">User <b>not found</b>.</response>
            <response code="500"><b>Something went wrong</b>. Have you tried to unplug the internet cable?</response>
        </member>
        <member name="M:Presentation.IAM.UserController.GetUserByEmail(Domain.IAM.Models.Queries.GetUserByEmailQuery)">
            <summary>
                Obtain the information of a user by its username. Your input should match the username.
            </summary>
            <returns>
                Returns the information of a user of type <c>UserInformation</c>.
            </returns>
            <remarks>
                This endpoint returns the information of a user of type <c>UserInformation</c>.
                <para>If you were expecting to return also the user credentials, well not obviously.</para>
                <para>You only need to provide a username to start searching.</para>
            </remarks>
            <response code="200">Returns <b>the information of the user</b>.</response>
            <response code="404">User <b>not found</b>.</response>
            <response code="500"><b>Something went wrong</b>. Have you tried to unplug the internet cable?</response>
        </member>
        <member name="M:Presentation.IAM.UserController.RegisterUser(Domain.IAM.Models.Commands.UserRegistrationCommand)">
            <summary>
                Register a new user into the system.
            </summary>
            <param name="command">Body request parameters that represents the basic information of a user.</param>
            <returns>
                Returns a message confirming the new user registered.
            </returns>
            <remarks>
                This endpoint allows the creation of new users providing basic information such as user information and credentials.
                The parameter type of this endpoint is an instance of <c>UserRegistrationRequest</c>.
                <para>Here is an overview of the parameters the makes <c>UserRegistrationRequest</c>: </para>
                    <para> &#149; <b>Username</b>: The username of the user. </para>
                    <para> &#149; <b>Password</b>: The password. </para>
                    <para> &#149; <b>Email</b>: The email of the user. </para>
                    <para> &#149; <b>PhoneNumber</b>: The phone number. </para>
                <para>You may be wondering where are the two segments we focus on. Well, an account allows any user to</para>
                <para>find, buy real states and also allows users to create publications. We wrapped them up in a single account</para>
                <para>to develop easier account creations and management.</para>
            </remarks>
            <response code="200">Returns <b>a confirmation message</b> for the new user registered.</response>
            <response code="500"><b>Something wrong</b> appears to be with your query.</response>
            <response code="400">You <b>didn't provide correct information</b> for the creation of a new user.</response>
        </member>
    </members>
</doc>
